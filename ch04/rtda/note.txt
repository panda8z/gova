今天2020年03月11日开始了第四章的代码书写。
今天完成运行时数据区的逻辑。

Runtime Data Area

Topic： java 虚拟机数据类型 和 go 语言数据类型的匹配关系
    byte -> int8
    short -> int16
    int -> int32
    long -> int64
    char -> uint16
    以上是整数类型

    float -> float32
    double -> float64
    以上是浮点类型

    boolean -> bool
    布尔类型

    以上是基本类型

    ===

    引用类型如下：

    类类型 - *Object
    接口类型 - *Object
    数组类型 - *Object
    null - nil

Topic: 定义对象父类 Object

    Object {
        //todo 暂时不知道怎么实现
    }

Topic： 定义线程 Thread

    Thread {
        pc int
        stack Stack 
    }
    这里留下了一个坑 Stack

    备注：  java命令提供了-Xss选项来设置Java虚拟机栈大小。

    给 Thread 定义了五个方法， PC、SetPC、PushFrame、PopFrame、CurrentFrame

    这里又留下了一个坑 Frame
    同时 对三个涉及Frame的方法实现过程中 给Stack定义了三个方法  
        push（Frame）： 压栈一个Frame
        pop()：弹出一个Frame
        top()：返回栈顶Frame的地址

Topic：定义虚拟机栈 Stack

    定义栈方法的过程中给Frame设置了一个lower属性


Topic：Frame 定义栈帧

    type Frame struct {
        lower *Frame
        localVars localVars
        operandStack *OperandStack
    }

    给Frame 定义一个 new 方法

    同时引出来我们要创建另外两个方法 newLocalVars和 newOpreandStack

Topic：LocalVars 局部便量表

    针对 int long float double  ref 
    五种类型的数据进行 getter setter 方法的定义
    ，
    float 转成int处理
    long 转成两个int值 
    double 使用 long 已有的逻辑来处理

    ref值是最好处理的

    这一部分有一些go语言的结构不懂：
    1. math.Float64bits(float64)
    2. math.Float64frombits(uint64)
    3. int64(high)<<32 | int64(low) 计算顺序不清晰
